<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 8" />
<title>Cancelling Scripts</title>
<link rel="StyleSheet" href="../rhinoscript.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="../whmsg.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.setRelStartPage)
	{
	addTocInfo("Introduction\nCancelling Scripts");
addButton("show",BTN_IMG,"Show","","","","",0,0,"../whd_show0.gif","../whd_show2.gif","../whd_show1.gif");
addButton("hide",BTN_IMG,"Hide","","","","",0,0,"../whd_hide0.gif","../whd_hide2.gif","../whd_hide1.gif");

	}

	document.write("<p style=\"text-align:right\"> ");
AddMasterBreadcrumbs("../index.html", "", ">", "Home", "../title.htm");
document.write("<a href=\"../introduction.htm\">Introduction<\/a> > Cancelling Scripts<\/p>");


	if (window.setRelStartPage)
	{
	setRelStartPage("../index.html");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}

}
else
	if (window.gbIE4)
		document.location.reload();
//-->
//]]></script>
</head>

<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(4);
//-->
//]]></script>
<h1>Cancelling Scripts</h1>
<p>When a script is running, and it is not waiting for user input, it can 
 be cancelled by pressing the <span style="font-weight: bold;"><b>ESC</b></span> 
 key.</p>
<h2>Cancelling out of a tight loop</h2>
<p>If you have a tight loop that does not call back into Rhino, then it 
 is possible for <span style="font-weight: bold;"><b>ESC</b></span> key processing 
 to be either very slow or not happen at all. This is because the tight 
 loop does not allow Rhino to process the messages, such as keystrokes, 
 sent to it by Windows. For example, the following script is not be cancelled 
 by pressing the <span style="font-weight: bold;"><b>ESC</b></span> key.</p>
<p class="Code">Sub TightLoopEscapeTest</p>
<p class="Code">&#160;&#160;For i = 0 To 100000</p>
<p class="Code">&#160;&#160;Next</p>
<p class="Code">End Sub</p>
<p>To work around this situation, you will want to call back into Rhino 
 inside of your tight loop. Using RhinoScript's <a href="../utility_methods/sleep.htm">Sleep</a> 
 function is a good way to do this without slowing down your code. For 
 example:</p>
<p class="Code">Sub TightLoopEscapeTest</p>
<p class="Code">&#160;&#160;For i = 0 To 100000</p>
<p class="Code">&#160;&#160;&#160;&#160;<span style="color: #008000;"><font color="green" >' 
 Do tight loop processing here...</font></span></p>
<p class="Code">&#160;&#160;&#160;&#160;Call Rhino.Sleep(0)</p>
<p class="Code">&#160;&#160;Next</p>
<p class="Code">End Sub</p>
<p>If your loop is relatively fast, you may want to postpone the <a href="../utility_methods/sleep.htm">Sleep</a> 
 call or else it will slow down your script significantly. For example: 
 </p>
<p class="Code">Sub TightLoopEscapeTest</p>
<p class="Code">&#160;&#160;For i = 0 To 100000</p>
<p class="Code">&#160;&#160;&#160;&#160;<span style="color: #008000;"><font color="green" >' 
 Do tight loop processing here...</font></span></p>
<p class="Code">&#160;&#160;&#160;&#160;If ((i Mod 25) = 0) Then Call Rhino.Sleep(0)</p>
<p class="Code">&#160;&#160;Next</p>
<p class="Code">End Sub</p>
<p>This will call the <a href="../utility_methods/sleep.htm">Sleep</a> 
 method only once every 25 iterations.</p>
<h2>Using OnCancelScript to handle script cancelling</h2>
<p>The default behavior when cancelling a script is to halt the script's 
 execution and print a &quot;Script cancelled&quot; message to Rhino's 
 command line. But, there are often times when you might want to know when 
 your script is cancelled. For example, lets say you have a script that: 
 (a) modifies some Rhino parameters, (b) performs an operation and, (c) 
 resets the modified parameters. If your script is cancelled in operation 
 (b), then Rhino can be left in a state unfamiliar to the user.</p>
<p>It is possible for your script to be notified when it has been cancelled. 
 This is done through a special, user-defined subroutine named <span style="font-weight: bold;"><b><a href="../utility_methods/oncancelscript.htm">OnCancelScript</a></b></span>. 
 </p>
<p>When a script is running and the <span style="font-weight: bold;"><b>ESC</b></span> 
 key is pressed, RhinoScript searches for loaded, user-defined subroutine 
 named <span style="font-weight: bold;"><b><a href="../utility_methods/oncancelscript.htm">OnCancelScript</a></b></span>. 
 If this subroutine is detected, RhinoScript will automatically run this 
 procedure instead of just printing the &quot;Script cancelled&quot; message. 
 </p>
<p>In the above script scenario, the user-defined <span style="font-weight: bold;"><b><a href="../utility_methods/oncancelscript.htm">OnCancelScript</a> </b></span>subroutine 
 could reset the parameters (c) that were modified when the script started 
 (a).</p>
<p>The following is a simple example that demonstrates the <span style="font-weight: bold;"><b><a href="../utility_methods/oncancelscript.htm">OnCancelScript</a> </b></span>procedure.</p>
<p class="Code">Sub TightLoopEscapeTest</p>
<p class="Code">&#160;&#160;For i = 0 to 100000</p>
<p class="Code">&#160;&#160;&#160;&#160;Call Rhino.Print(i)</p>
<p class="Code">&#160;&#160;&#160;&#160;Call Rhino.Sleep(0)</p>
<p class="Code">&#160;&#160;Next</p>
<p class="Code">End Sub</p>
<p class="Code" style="color: #008000;">' User-defined cancel script handler</p>
<p class="Code">Sub OnCancelScript</p>
<p class="Code" style="color: #008000;">&#160;&#160;' Do script cancelling 
 operations here...</p>
<p class="Code">&#160;&#160;Call MsgBox(&quot;Script Cancelled!&quot;, 
 vbOkOnly + vbExclamation, &quot;RhinoScript&quot;)</p>
<p class="Code">End Sub</p>
<p>Note, your user-defined <span style="font-weight: bold;"><b><a href="../utility_methods/oncancelscript.htm">OnCancelScript</a></b></span> 
 subroutine must not have any arguments. If you define your OnCancelScript 
 subroutine as one that requires one or more arguments, then RhinoScript 
 will not execute it when the <span style="font-weight: bold;"><b>ESC</b></span> 
 key is pressed.</p>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);

highlightSearch();
//-->
//]]></script>
</body>
</html>
